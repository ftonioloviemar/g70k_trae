#!/usr/bin/env python3
"""
Teste final para verificar a estrutura horizontal da pagina√ß√£o
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))

import requests
from bs4 import BeautifulSoup

def test_pagination_structure():
    """Testa a estrutura da pagina√ß√£o para verificar se est√° horizontal"""
    
    print("=== TESTE FINAL DA ESTRUTURA DE PAGINA√á√ÉO ===\n")
    
    # Criar sess√£o para manter cookies
    session = requests.Session()
    
    # 1. Fazer login
    print("1. Fazendo login como administrador...")
    login_data = {
        'email': 'ftoniolo@viemar.com.br',
        'senha': '123456'
    }
    
    try:
        login_response = session.post('http://localhost:8000/login', data=login_data, allow_redirects=True)
        
        if login_response.status_code == 200 and '/admin' in login_response.url:
            print("   ‚úÖ Login bem-sucedido!")
        else:
            print(f"   ‚ùå Erro no login: {login_response.status_code}")
            return False
        
        # 2. Acessar p√°gina de usu√°rios
        print("\n2. Acessando p√°gina de usu√°rios...")
        usuarios_response = session.get('http://localhost:8000/admin/usuarios')
        
        if usuarios_response.status_code != 200:
            print(f"   ‚ùå Erro ao acessar usu√°rios: {usuarios_response.status_code}")
            return False
        
        print("   ‚úÖ P√°gina de usu√°rios carregada!")
        
        # 3. Analisar estrutura da pagina√ß√£o
        print("\n3. Analisando estrutura da pagina√ß√£o...")
        soup = BeautifulSoup(usuarios_response.text, 'html.parser')
        
        # Procurar container de pagina√ß√£o
        pagination_container = soup.find(class_='pagination-container')
        if not pagination_container:
            print("   ‚ùå Container de pagina√ß√£o n√£o encontrado!")
            return False
        
        print("   ‚úÖ Container de pagina√ß√£o encontrado!")
        
        # Verificar se tem uma row (linha)
        row = pagination_container.find(class_='row')
        if not row:
            print("   ‚ùå Elemento 'row' n√£o encontrado na pagina√ß√£o!")
            return False
        
        print("   ‚úÖ Elemento 'row' encontrado!")
        
        # Verificar colunas
        cols = row.find_all('col')
        if len(cols) != 3:
            print(f"   ‚ùå Esperado 3 colunas, encontrado {len(cols)}!")
            return False
        
        print(f"   ‚úÖ Encontradas {len(cols)} colunas (correto)!")
        
        # Verificar conte√∫do das colunas (o conte√∫do real est√° em divs ap√≥s as tags col)
        print("\n4. Verificando conte√∫do das colunas...")
        
        # Buscar todos os divs filhos da row (que cont√™m o conte√∫do real)
        content_divs = row.find_all('div', recursive=False)
        
        if len(content_divs) < 3:
            print(f"   ‚ùå Esperado pelo menos 3 divs de conte√∫do, encontrado {len(content_divs)}!")
            return False
        
        # Div 1: Informa√ß√µes de registros
        div1 = content_divs[0]
        mostrando_text = div1.find('small')
        if mostrando_text and 'Mostrando' in mostrando_text.get_text():
            print("   ‚úÖ Div 1: Informa√ß√µes de registros encontradas!")
        else:
            print("   ‚ùå Div 1: Informa√ß√µes de registros n√£o encontradas!")
            print(f"   Debug - Conte√∫do do div 1: {div1.get_text()[:100]}")
            return False
        
        # Div 2: Navega√ß√£o de p√°ginas
        div2 = content_divs[1]
        nav = div2.find('nav')
        pagination_ul = nav.find('ul', class_='pagination') if nav else None
        if pagination_ul:
            page_items = pagination_ul.find_all('li', class_='page-item')
            print(f"   ‚úÖ Div 2: Navega√ß√£o encontrada com {len(page_items)} itens!")
        else:
            print("   ‚ùå Div 2: Navega√ß√£o n√£o encontrada!")
            return False
        
        # Div 3: Seletor de registros por p√°gina
        div3 = content_divs[2]
        registros_label = div3.find('label')
        if registros_label and 'Registros por p√°gina' in registros_label.get_text():
            print("   ‚úÖ Div 3: Seletor de registros por p√°gina encontrado!")
        else:
            print("   ‚ùå Div 3: Seletor de registros por p√°gina n√£o encontrado!")
            return False
        
        # 5. Verificar classes de alinhamento horizontal
        print("\n5. Verificando classes de alinhamento horizontal...")
        
        # Verificar se as colunas t√™m classes de flexbox horizontal
        classes_horizontais = ['d-flex', 'justify-content-start', 'justify-content-center', 'justify-content-end']
        
        for i, col in enumerate(cols, 1):
            col_classes = col.get('class', [])
            tem_flex = any(cls in col_classes for cls in classes_horizontais)
            if tem_flex:
                print(f"   ‚úÖ Coluna {i}: Classes de alinhamento horizontal encontradas!")
            else:
                print(f"   ‚ùå Coluna {i}: Classes de alinhamento horizontal n√£o encontradas!")
        
        # 6. Verificar aus√™ncia de indicadores verticais
        print("\n6. Verificando aus√™ncia de layout vertical...")
        
        # Procurar por indicadores de layout vertical
        vertical_indicators = pagination_container.find_all(class_=lambda x: x and ('flex-column' in x or 'vertical' in x))
        
        if not vertical_indicators:
            print("   ‚úÖ Nenhum indicador de layout vertical encontrado!")
        else:
            print(f"   ‚ö†Ô∏è Encontrados {len(vertical_indicators)} indicadores verticais!")
        
        print("\nüéâ RESULTADO FINAL:")
        print("‚úÖ A pagina√ß√£o est√° estruturada HORIZONTALMENTE!")
        print("‚úÖ Possui 3 colunas em uma √∫nica linha (row)")
        print("‚úÖ Coluna 1: Informa√ß√µes de registros (esquerda)")
        print("‚úÖ Coluna 2: Navega√ß√£o de p√°ginas (centro)")
        print("‚úÖ Coluna 3: Seletor de registros (direita)")
        print("‚úÖ Usa classes de flexbox para alinhamento horizontal")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_pagination_structure()
    if success:
        print("\nüéØ TESTE CONCLU√çDO COM SUCESSO!")
        print("A pagina√ß√£o est√° corretamente implementada na orienta√ß√£o horizontal.")
    else:
        print("\n‚ùå TESTE FALHOU!")
        print("H√° problemas na estrutura da pagina√ß√£o.")
    
    sys.exit(0 if success else 1)