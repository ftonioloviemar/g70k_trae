#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para criar um ve√≠culo de teste para sergio@reis.com
"""

import sqlite3
from datetime import datetime

def create_sergio_vehicle():
    """Cria um ve√≠culo de teste para sergio@reis.com"""
    
    db_path = "viemar_garantia.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("=== Criando ve√≠culo para sergio@reis.com ===")
        
        # 1. Verificar se o usu√°rio existe
        cursor.execute(
            "SELECT id, nome FROM usuarios WHERE email = ?",
            ("sergio@reis.com",)
        )
        usuario = cursor.fetchone()
        
        if not usuario:
            print("‚ùå Usu√°rio sergio@reis.com n√£o encontrado!")
            return False
            
        user_id, nome = usuario
        print(f"‚úÖ Usu√°rio encontrado: {nome} (ID: {user_id})")
        
        # 2. Verificar se j√° tem ve√≠culos
        cursor.execute(
            "SELECT COUNT(*) FROM veiculos WHERE usuario_id = ?",
            (user_id,)
        )
        count = cursor.fetchone()[0]
        
        if count > 0:
            print(f"‚úÖ Usu√°rio j√° possui {count} ve√≠culo(s)")
            return True
            
        # 3. Criar ve√≠culo de teste
        print("\nüìù Criando ve√≠culo de teste...")
        
        agora = datetime.now().isoformat()
        
        cursor.execute(
            """
            INSERT INTO veiculos (
                usuario_id, marca, modelo, ano_modelo, placa, 
                data_cadastro, data_atualizacao, ativo, cor, chassi
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (
                user_id,
                "Toyota",
                "Corolla",
                "2020",
                "ABC1234",
                agora,
                agora,
                True,
                "Prata",
                "9BWZZZ377VT004251"
            )
        )
        
        veiculo_id = cursor.lastrowid
        conn.commit()
        
        print(f"‚úÖ Ve√≠culo criado com sucesso! ID: {veiculo_id}")
        print("   - Marca: Toyota")
        print("   - Modelo: Corolla")
        print("   - Ano: 2020")
        print("   - Placa: ABC1234")
        
        # 4. Verificar se foi criado corretamente
        cursor.execute(
            "SELECT id, marca, modelo, ano_modelo, placa FROM veiculos WHERE usuario_id = ?",
            (user_id,)
        )
        veiculos = cursor.fetchall()
        
        print(f"\n‚úÖ Verifica√ß√£o: {len(veiculos)} ve√≠culo(s) encontrado(s) para o usu√°rio")
        for veiculo in veiculos:
            v_id, marca, modelo, ano, placa = veiculo
            print(f"   - {marca} {modelo} {ano} - {placa} (ID: {v_id})")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    print("Iniciando cria√ß√£o de ve√≠culo para sergio@reis.com...")
    
    sucesso = create_sergio_vehicle()
    
    if sucesso:
        print("\nüéâ Ve√≠culo criado com sucesso!")
    else:
        print("\n‚ùå Falha ao criar ve√≠culo.")