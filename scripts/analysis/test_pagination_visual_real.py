#!/usr/bin/env python3
"""
Teste visual real da pagina√ß√£o horizontal
Este script faz uma verifica√ß√£o real da tela para garantir que a pagina√ß√£o est√° horizontal
"""

import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

import requests
from bs4 import BeautifulSoup
import time
import json

def test_pagination_visual_real():
    """
    Testa visualmente se a pagina√ß√£o est√° realmente horizontal
    Verifica o HTML real da p√°gina e analisa a estrutura
    """
    print("üîç Testando pagina√ß√£o horizontal - VERIFICA√á√ÉO REAL DA TELA")
    print("=" * 60)
    
    try:
        # URL da p√°gina de usu√°rios (que tem pagina√ß√£o)
        url = "http://localhost:8000/admin/usuarios"
        
        print(f"üì° Fazendo requisi√ß√£o para: {url}")
        
        # Fazer login primeiro
        session = requests.Session()
        
        # 1. Fazer login como admin
        print("üîê Fazendo login como admin...")
        login_data = {
            'email': 'admin@viemar.com.br',
            'senha': 'admin123'
        }
        
        login_response = session.post("http://localhost:8000/login", data=login_data, allow_redirects=False)
        
        if login_response.status_code not in [302, 303]:
            print(f"‚ùå Erro no login: {login_response.status_code}")
            return False
        
        print("‚úÖ Login realizado com sucesso")
        
        # 2. Acessar p√°gina de usu√°rios
        response = session.get(url, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ P√°gina carregada com sucesso")
        else:
            print(f"‚ùå Erro HTTP: {response.status_code}")
            return False
            
        # Parsear HTML
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Salvar HTML para debug
        debug_file = Path("C:\\python\\g70k_trae\\tmp\\pagination_debug_real.html")
        debug_file.parent.mkdir(exist_ok=True)
        
        with open(debug_file, "w", encoding="utf-8") as f:
            f.write(response.text)
        print(f"üìÑ HTML salvo em: {debug_file}")
        
        # Verificar estrutura da pagina√ß√£o
        print("\nüîç AN√ÅLISE DA ESTRUTURA DE PAGINA√á√ÉO:")
        print("-" * 40)
        
        # 1. Procurar container de pagina√ß√£o
        pagination_container = soup.find(class_="pagination-container")
        
        if not pagination_container:
            print("‚ùå ERRO: Container de pagina√ß√£o (.pagination-container) n√£o encontrado!")
            return False
        
        print("‚úÖ Container de pagina√ß√£o encontrado")
        
        # 2. Verificar se tem classe mt-3
        container_classes = pagination_container.get("class", [])
        if "mt-3" in container_classes:
            print("‚úÖ Classe mt-3 (margem superior) presente")
        else:
            print("‚ö†Ô∏è  Classe mt-3 n√£o encontrada")
        
        # 3. Verificar estrutura Row/Col (Bootstrap)
        rows = pagination_container.find_all(class_="row")
        if not rows:
            print("‚ùå ERRO: Nenhuma row encontrada no container!")
            return False
        
        print(f"‚úÖ Encontradas {len(rows)} row(s)")
        
        # 4. Analisar primeira row (principal)
        main_row = rows[0]
        cols = main_row.find_all(class_=lambda x: x and any("col" in cls for cls in x))
        
        if len(cols) < 3:
            print(f"‚ùå ERRO: Esperadas 3 colunas, encontradas {len(cols)}")
            return False
        
        print(f"‚úÖ Encontradas {len(cols)} colunas (layout horizontal)")
        
        # 5. Verificar conte√∫do das colunas
        print("\nüìä AN√ÅLISE DAS COLUNAS:")
        print("-" * 25)
        
        # Coluna 1: Informa√ß√µes de pagina√ß√£o
        col1 = cols[0]
        pagination_info = col1.find("small", class_="text-muted")
        if pagination_info and "Mostrando" in pagination_info.text:
            print("‚úÖ Coluna 1: Informa√ß√µes de pagina√ß√£o OK")
            print(f"   üìù Texto: {pagination_info.text.strip()}")
        else:
            print("‚ùå Coluna 1: Informa√ß√µes de pagina√ß√£o n√£o encontradas")
        
        # Coluna 2: Navega√ß√£o de p√°ginas
        col2 = cols[1]
        pagination_nav = col2.find("nav")
        if pagination_nav:
            print("‚úÖ Coluna 2: Navega√ß√£o de p√°ginas OK")
            
            # Verificar se tem n√∫meros de p√°gina
            page_links = pagination_nav.find_all("a", class_="page-link")
            if page_links:
                print(f"   üîó Encontrados {len(page_links)} links de p√°gina")
            
            # Verificar se est√° centralizada
            nav_classes = pagination_nav.parent.get("class", [])
            if "justify-content-center" in nav_classes:
                print("   ‚úÖ Navega√ß√£o centralizada")
            else:
                print("   ‚ö†Ô∏è  Navega√ß√£o pode n√£o estar centralizada")
        else:
            print("‚ùå Coluna 2: Navega√ß√£o de p√°ginas n√£o encontrada")
        
        # Coluna 3: Seletor de registros por p√°gina
        col3 = cols[2]
        page_size_selector = col3.find("select", class_="form-select")
        if page_size_selector:
            print("‚úÖ Coluna 3: Seletor de registros por p√°gina OK")
            
            # Verificar op√ß√µes
            options = page_size_selector.find_all("option")
            if options:
                values = [opt.get("value") for opt in options]
                print(f"   üìã Op√ß√µes dispon√≠veis: {values}")
        else:
            print("‚ùå Coluna 3: Seletor de registros por p√°gina n√£o encontrado")
        
        # 6. Verificar classes de alinhamento horizontal
        print("\nüéØ VERIFICA√á√ÉO DE LAYOUT HORIZONTAL:")
        print("-" * 35)
        
        horizontal_indicators = []
        
        # Verificar d-flex nas colunas
        for i, col in enumerate(cols, 1):
            col_classes = col.get("class", [])
            if "d-flex" in col_classes:
                horizontal_indicators.append(f"Coluna {i} tem d-flex")
            if "align-items-center" in col_classes:
                horizontal_indicators.append(f"Coluna {i} tem align-items-center")
            if "justify-content-start" in col_classes:
                horizontal_indicators.append(f"Coluna {i} alinhada √† esquerda")
            elif "justify-content-center" in col_classes:
                horizontal_indicators.append(f"Coluna {i} centralizada")
            elif "justify-content-end" in col_classes:
                horizontal_indicators.append(f"Coluna {i} alinhada √† direita")
        
        if horizontal_indicators:
            print("‚úÖ Indicadores de layout horizontal encontrados:")
            for indicator in horizontal_indicators:
                print(f"   ‚Ä¢ {indicator}")
        else:
            print("‚ö†Ô∏è  Poucos indicadores de layout horizontal")
        
        # 7. Verificar se N√ÉO h√° indicadores de layout vertical
        print("\nüö´ VERIFICA√á√ÉO DE LAYOUT VERTICAL (deve estar ausente):")
        print("-" * 50)
        
        vertical_indicators = []
        
        # Procurar por classes que indicariam layout vertical
        vertical_classes = ["flex-column", "d-block", "w-100"]
        for cls in vertical_classes:
            if soup.find(class_=cls):
                vertical_indicators.append(f"Classe {cls} encontrada")
        
        if vertical_indicators:
            print("‚ö†Ô∏è  Poss√≠veis indicadores de layout vertical:")
            for indicator in vertical_indicators:
                print(f"   ‚Ä¢ {indicator}")
        else:
            print("‚úÖ Nenhum indicador de layout vertical encontrado")
        
        # 8. Resumo final
        print("\n" + "=" * 60)
        print("üìã RESUMO DA VERIFICA√á√ÉO:")
        print("=" * 60)
        
        checks = [
            pagination_container is not None,
            len(rows) > 0,
            len(cols) >= 3,
            pagination_info is not None,
            pagination_nav is not None,
            page_size_selector is not None,
            len(horizontal_indicators) > 0
        ]
        
        passed_checks = sum(checks)
        total_checks = len(checks)
        
        print(f"‚úÖ Verifica√ß√µes passadas: {passed_checks}/{total_checks}")
        
        if passed_checks >= 6:
            print("üéâ SUCESSO: A pagina√ß√£o est√° HORIZONTAL e funcionando corretamente!")
            print("   ‚Ä¢ Layout em 3 colunas lado a lado")
            print("   ‚Ä¢ Informa√ß√µes √† esquerda")
            print("   ‚Ä¢ Navega√ß√£o no centro")
            print("   ‚Ä¢ Seletor √† direita")
            return True
        else:
            print("‚ùå FALHA: A pagina√ß√£o N√ÉO est√° horizontal ou tem problemas!")
            return False
        
    except requests.exceptions.ConnectionError:
        print("‚ùå ERRO: N√£o foi poss√≠vel conectar ao servidor")
        print("   Certifique-se de que o servidor est√° rodando em http://localhost:8000")
        return False
    except Exception as e:
        print(f"‚ùå ERRO inesperado: {e}")
        return False


if __name__ == "__main__":
    print("üöÄ Iniciando teste visual real da pagina√ß√£o horizontal...")
    print()
    
    success = test_pagination_visual_real()
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ RESULTADO: PAGINA√á√ÉO HORIZONTAL CONFIRMADA!")
    else:
        print("‚ùå RESULTADO: PAGINA√á√ÉO COM PROBLEMAS!")
    print("=" * 60)