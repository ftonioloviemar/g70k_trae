"""
Teste simples para verificar se a pagina√ß√£o est√° horizontal
"""
import requests
import time
from bs4 import BeautifulSoup


def test_pagination_horizontal_simple():
    """Testa se a pagina√ß√£o est√° horizontal usando requests e BeautifulSoup"""
    
    # Aguardar um pouco para garantir que o servidor est√° rodando
    time.sleep(2)
    
    try:
        # Criar sess√£o para manter cookies
        session = requests.Session()
        
        # Primeiro fazer login como admin
        login_data = {
            'email': 'admin@viemar.com.br',
            'senha': 'admin123'  # Mudando de 'password' para 'senha'
        }
        
        login_response = session.post("http://localhost:8000/login", data=login_data, timeout=10)
        
        print(f"üîê Status do login: {login_response.status_code}")
        print(f"üîó URL ap√≥s login: {login_response.url}")
        
        if login_response.status_code != 200:
            print(f"‚ùå Erro no login: Status code {login_response.status_code}")
            print(f"üìÑ Conte√∫do da resposta: {login_response.text[:500]}")
            return False
            
        # Fazer requisi√ß√£o para a p√°gina de usu√°rios
        response = session.get("http://localhost:8000/admin/usuarios", timeout=10)
        
        if response.status_code != 200:
            print(f"‚ùå Erro: Status code {response.status_code}")
            return False
            
        # Parsear o HTML
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # Debug: salvar o HTML para an√°lise
        with open("C:\\python\\g70k_trae\\tmp\\debug_usuarios_page.html", "w", encoding="utf-8") as f:
            f.write(response.text)
        print("üìÑ HTML salvo em tmp/debug_usuarios_page.html")
        
        # Verificar se existe o container de pagina√ß√£o
        pagination_container = soup.find(class_="pagination-container")
        
        if not pagination_container:
            print("‚ùå Container de pagina√ß√£o n√£o encontrado")
            return False
            
        print("‚úÖ Container de pagina√ß√£o encontrado")
        
        # Verificar se tem a classe mt-3 (margem top)
        if "mt-3" in pagination_container.get("class", []):
            print("‚úÖ Classe mt-3 encontrada")
        
        # Verificar se tem elementos row e col
        rows = pagination_container.find_all(class_="row")
        if rows:
            print(f"‚úÖ Encontradas {len(rows)} row(s)")
            
            # Verificar colunas na primeira row
            cols = rows[0].find_all(class_=lambda x: x and "col" in x)
            if cols:
                print(f"‚úÖ Encontradas {len(cols)} coluna(s)")
                
                # Verificar se as colunas t√™m as classes corretas
                for i, col in enumerate(cols):
                    classes = col.get("class", [])
                    if "d-flex" in classes:
                        print(f"‚úÖ Coluna {i+1} tem d-flex")
                    if "align-items-center" in classes:
                        print(f"‚úÖ Coluna {i+1} tem align-items-center")
                        
        # Verificar se existe navega√ß√£o de p√°ginas
        pagination_nav = soup.find("nav", {"aria-label": "Navega√ß√£o de p√°ginas"})
        if pagination_nav:
            print("‚úÖ Navega√ß√£o de p√°ginas encontrada")
            
        # Verificar se existe seletor de registros por p√°gina
        page_size_selector = soup.find("select", class_="form-select")
        if page_size_selector:
            print("‚úÖ Seletor de registros por p√°gina encontrado")
            
        # Verificar informa√ß√µes de pagina√ß√£o
        pagination_info = soup.find("small", class_="text-muted")
        if pagination_info and "Mostrando" in pagination_info.text:
            print("‚úÖ Informa√ß√µes de pagina√ß√£o encontradas")
            
        print("üéâ Teste de pagina√ß√£o horizontal passou!")
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False


if __name__ == "__main__":
    success = test_pagination_horizontal_simple()
    if success:
        print("\n‚úÖ SUCESSO: A pagina√ß√£o est√° funcionando corretamente!")
    else:
        print("\n‚ùå FALHA: Problemas encontrados na pagina√ß√£o")