#!/usr/bin/env python3
"""
Script de Produ√ß√£o para Importa√ß√£o de Dados do Caspio

Este script importa dados do sistema Caspio antigo para o novo sistema G70K.
Importa usu√°rios, ve√≠culos e garantias mantendo a integridade dos dados.

Uso:
    uv run scripts/utils/import_caspio_production.py

Requisitos:
    - Arquivos XML do Caspio na pasta docs/context/caspio_viemar/
    - Banco de dados SQLite configurado
    - Backup do banco atual (recomendado)

Autor: Sistema G70K
Data: 2025-09-17
"""

import sys
import os
from pathlib import Path
from datetime import datetime

# Adicionar o diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))

from app.services.caspio_import_service import CaspioImportService
from app.logger import get_logger

logger = get_logger(__name__)

def fazer_backup_banco():
    """Faz backup do banco de dados atual antes da importa√ß√£o."""
    try:
        from shutil import copy2
        
        db_path = root_dir / "data" / "viemar_garantia.db"
        if db_path.exists():
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = root_dir / "data" / f"viemar_garantia_backup_{timestamp}.db"
            copy2(db_path, backup_path)
            logger.info(f"Backup criado: {backup_path}")
            print(f"‚úÖ Backup do banco criado: {backup_path.name}")
            return True
        else:
            logger.warning("Banco de dados n√£o encontrado para backup")
            print("‚ö†Ô∏è Banco de dados n√£o encontrado para backup")
            return False
    except Exception as e:
        logger.error(f"Erro ao fazer backup: {e}")
        print(f"‚ùå Erro ao fazer backup: {e}")
        return False

def verificar_arquivos_caspio():
    """Verifica se os arquivos XML do Caspio existem."""
    caspio_dir = root_dir / "docs" / "context" / "caspio_viemar"
    
    arquivos_necessarios = [
        "USUARIO.xml",
        "VEICULO.xml", 
        "PRODUTO_APLICADO.xml"
    ]
    
    arquivos_encontrados = []
    arquivos_faltando = []
    
    for arquivo in arquivos_necessarios:
        arquivo_path = caspio_dir / arquivo
        if arquivo_path.exists():
            arquivos_encontrados.append(arquivo)
            logger.info(f"Arquivo encontrado: {arquivo}")
        else:
            arquivos_faltando.append(arquivo)
            logger.warning(f"Arquivo n√£o encontrado: {arquivo}")
    
    print(f"\nüìÅ Verifica√ß√£o de arquivos:")
    print(f"‚úÖ Encontrados: {len(arquivos_encontrados)} arquivos")
    for arquivo in arquivos_encontrados:
        print(f"   - {arquivo}")
    
    if arquivos_faltando:
        print(f"‚ùå Faltando: {len(arquivos_faltando)} arquivos")
        for arquivo in arquivos_faltando:
            print(f"   - {arquivo}")
        return False
    
    return True

def main():
    """Fun√ß√£o principal do script de importa√ß√£o."""
    print("üöÄ Iniciando Importa√ß√£o de Dados do Caspio")
    print("=" * 50)
    
    # Verificar arquivos necess√°rios
    print("\n1Ô∏è‚É£ Verificando arquivos do Caspio...")
    if not verificar_arquivos_caspio():
        print("\n‚ùå Arquivos necess√°rios n√£o encontrados!")
        print("Certifique-se de que os arquivos XML est√£o em docs/context/caspio_viemar/")
        return False
    
    # Fazer backup do banco
    print("\n2Ô∏è‚É£ Fazendo backup do banco de dados...")
    if not fazer_backup_banco():
        resposta = input("\n‚ö†Ô∏è N√£o foi poss√≠vel fazer backup. Continuar mesmo assim? (s/N): ")
        if resposta.lower() != 's':
            print("Importa√ß√£o cancelada pelo usu√°rio.")
            return False
    
    # Confirmar importa√ß√£o
    print("\n3Ô∏è‚É£ Confirma√ß√£o de importa√ß√£o")
    print("Esta opera√ß√£o ir√° importar dados do Caspio para o sistema atual.")
    print("Dados duplicados ser√£o ignorados automaticamente.")
    resposta = input("\nDeseja continuar com a importa√ß√£o? (s/N): ")
    
    if resposta.lower() != 's':
        print("Importa√ß√£o cancelada pelo usu√°rio.")
        return False
    
    # Executar importa√ß√£o
    print("\n4Ô∏è‚É£ Executando importa√ß√£o...")
    print("-" * 30)
    
    try:
        # Inicializar servi√ßo de importa√ß√£o
        caspio_dir = root_dir / "docs" / "context" / "caspio_viemar"
        service = CaspioImportService(str(caspio_dir))
        
        # Executar importa√ß√£o completa
        stats = service.import_all()
        
        # Exibir resultados
        print("\n" + "=" * 50)
        print("üéâ IMPORTA√á√ÉO CONCLU√çDA!")
        print("=" * 50)
        
        print(f"\nüìà Estat√≠sticas finais:")
        print(f"- Usu√°rios: {stats['users_imported']} importados, {stats['users_skipped']} ignorados")
        print(f"- Ve√≠culos: {stats['vehicles_imported']} importados, {stats['vehicles_skipped']} ignorados")
        print(f"- Garantias: {stats['warranties_imported']} importadas, {stats['warranties_skipped']} ignoradas")
        
        if stats['errors']:
            print(f"\n‚ö†Ô∏è Erros encontrados ({len(stats['errors'])}):")
            for i, erro in enumerate(stats['errors'][:10], 1):
                print(f"  {i}. {erro}")
            if len(stats['errors']) > 10:
                print(f"  ... e mais {len(stats['errors']) - 10} erros")
        
        # Log final
        logger.info("Importa√ß√£o de produ√ß√£o conclu√≠da com sucesso")
        logger.info(f"Stats: {stats}")
        
        return True
        
    except Exception as e:
        logger.error(f"Erro durante importa√ß√£o: {e}")
        print(f"\n‚ùå Erro durante importa√ß√£o: {e}")
        return False

if __name__ == "__main__":
    try:
        sucesso = main()
        if sucesso:
            print("\n‚úÖ Script executado com sucesso!")
            sys.exit(0)
        else:
            print("\n‚ùå Script finalizado com erros.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Importa√ß√£o interrompida pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        logger.error(f"Erro inesperado: {e}")
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)