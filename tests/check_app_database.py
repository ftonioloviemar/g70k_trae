#!/usr/bin/env python3
"""
Verificar qual banco de dados a aplica√ß√£o est√° usando
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Carregar vari√°veis de ambiente
try:
    from dotenv import load_dotenv
    from pathlib import Path
    env_path = Path(__file__).parent.parent / '.env'
    if env_path.exists():
        load_dotenv(env_path)
        print(f"‚úÖ Arquivo .env carregado: {env_path}")
    else:
        print(f"‚ö†Ô∏è Arquivo .env n√£o encontrado: {env_path}")
except ImportError:
    print("‚ö†Ô∏è python-dotenv n√£o instalado")

from app.config import Config
from fastlite import Database

def main():
    """Verificar configura√ß√£o do banco da aplica√ß√£o"""
    
    try:
        print(f"üîç Verificando configura√ß√£o da aplica√ß√£o...")
        config = Config()
        
        print(f"üìÅ Caminho do banco configurado: {config.DATABASE_PATH}")
        print(f"üìÅ Arquivo existe: {os.path.exists(config.DATABASE_PATH)}")
        
        if os.path.exists(config.DATABASE_PATH):
            print(f"\nüîç Verificando conte√∫do do banco...")
            db = Database(config.DATABASE_PATH)
            
            # Verificar se usu√°rio sergio existe
            result = db.execute(
                "SELECT id, email, nome FROM usuarios WHERE email = ?",
                ('sergio@reis.com',)
            ).fetchone()
            
            if result:
                print(f"‚úÖ Usu√°rio sergio@reis.com encontrado no banco da aplica√ß√£o!")
                print(f"  ID: {result[0]}")
                print(f"  Email: {result[1]}")
                print(f"  Nome: {result[2]}")
            else:
                print(f"‚ùå Usu√°rio sergio@reis.com N√ÉO encontrado no banco da aplica√ß√£o!")
                
                # Listar todos os usu√°rios
                print(f"\nüìã Usu√°rios no banco da aplica√ß√£o:")
                usuarios = db.execute("SELECT id, email, nome FROM usuarios").fetchall()
                for user in usuarios:
                    print(f"  {user[0]}: {user[1]} - {user[2]}")
        else:
            print(f"‚ùå Arquivo de banco n√£o existe!")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()